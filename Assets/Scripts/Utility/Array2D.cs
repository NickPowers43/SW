//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace Utility
{
	public class Array2D<T>
	{
		public Vec2i dim;
		public T[] data;
		
		public Array2D (Vec2i dim, T def)
		{
			this.dim = dim;
			this.data = new T[dim.x * dim.y];
			for (int i = 0; i < data.Length; i++) {
				data[i] = def;
			}
		}
		public Array2D (T[] data, Vec2i dim)
		{
			this.dim = dim;
			this.data = data;
		}
		
		public int indexOf (Vec2i index)
		{
			return (index.y * dim.x) + index.x;
		}
	
		public int indexOf (int x, int y)
		{
			return (y * dim.x) + x;
		}
	
		public void Set (Vec2i index, T val)
		{
			data [(index.y * dim.x) + index.x] = val;
		}
	
		public void Set (Vec2i step, Array2D<T> src)
		{
			for (int i = 0; i < src.dim.y; i++) {
				for (int j = 0; j < src.dim.x; j++) {
					Set (
						new Vec2i (j, i) * step,
						src.Get (j, i));
				}
			}
		}

        public void Set (Array2D<T> src, Vec2i srcOffset)
        {
            for (int i = 0; i < dim.y; i++)
            {
                for (int j = 0; j < dim.x; j++)
                {
                    Set(new Vec2i(j, i), src.Get(srcOffset + new Vec2i(j, i)));
                }
            }
        }
	
		public T Get (Vec2i index)
		{
			return data [(index.y * dim.x) + index.x];
		}

		public T[] Get (Vec2i start, Vec2i increment, int count)
		{
			T[] output = new T[count];

			Vec2i current = start;
			for (int i = 0; i < count; i++) {
				output[i] = Get(current);
				current = current + increment;
			}

			return output;
		}

		public T[] Left {
			get {
				T[] output = new T[dim.y];
				
				for (int i = 0; i < dim.y; i++) {
					output[i] = Get(0, i);
				}
				
				return output;
			}
			set {
				for (int i = 0; i < dim.y; i++) {
					Set (0, i, value[i]);
				}
			}
		}
		
		public T[] Right {
			get {
				T[] output = new T[dim.y];
				
				for (int i = 0; i < dim.y; i++) {
					output[i] = Get(dim.x - 1, i);
				}
				
				return output;
			}
			set {
				for (int i = 0; i < dim.y; i++) {
					Set (dim.x - 1, i, value[i]);
				}
			}
		}
		
		public T[] Top {
			get {
				T[] output = new T[dim.x];
				
				for (int i = 0; i < dim.x; i++) {
					output[i] = Get(i, dim.y - 1);
				}
				
				return output;
			}
			set {
				for (int i = 0; i < dim.x; i++) {
					Set (i, dim.y - 1, value[i]);
				}
			}
		}
		
		public T[] Bottom {
			get {
				T[] output = new T[dim.x];
				
				for (int i = 0; i < dim.x; i++) {
					output[i] = Get(i, 0);
				}
				
				return output;
			}
			set {
				for (int i = 0; i < dim.x; i++) {
					Set (i, 0, value[i]);
				}
			}
		}
		
		public void Set (int x, int y, T val)
		{
			data [(y * dim.x) + x] = val;
		}
	
		public T Get (int x, int y)
		{
			return data [(y * dim.x) + x];
		}
	}
}

